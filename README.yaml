---
# Name of this project
name: terraform-aws-cloudfront-security-sync
title: AWS CloudFront Security Group Syncronisation

# Build Badges
badges:
  - name: "Build Status"
    image: "https://circleci.com/gh/ifunky/terraform-aws-cloudfront-security-sync.svg?style=svg"
    url: "https://circleci.com/gh/ifunky/terraform-aws-cloudfront-security-sync"
  - name: "Latest Version"
    image: "https://img.shields.io/github/release/ifunky/terraform-aws-cloudfront-security-sync.svg"
    url: "https://github.com/ifunky/terraform-aws-cloudfront-security-sync/releases"
description: |-
  When using AWS WAF to secure your web applications, it’s important to ensure that only CloudFront can access your origin; otherwise, someone could bypass
  AWS WAF itself. If your origin is an Elastic Load Balancing load balancer or an Amazon EC2 instance, you can use VPC security groups to allow only
  CloudFront to access your applications. You can accomplish this by creating a security group that only allows the specific IP 
  ranges of CloudFront. AWS publishes these IP ranges in JSON format so that you can create networking configurations that use them. These ranges are 
  separated by service and region, which means you’ll only need to allow IP ranges that correspond to CloudFront.

  This module creates the resources necessary that update a security group's ingress rules to restrict traffic from the CloudFront IP addresses.

  __NOTE:__ For additional security you may like to also implement an `Origin Custom Header` and add a WAF WebACL rule that restricts traffic to this header.  The 
  reason for doing this would be to avoid an external attempt at pointing a different CDN to your publically available orgin (if using an ALB).

  ## Features

  ### SNS subscription

  - A subscription to `arn:aws:sns:us-east-1:806199016981:AmazonIpSpaceChanged` wil be added to the `us-east-1` region.  The subscription must be in this region as that's where Amazon's topic exists 

  ### Lambda Configuration
  - A Lambda function that is triggered from the SNS subscription
  - IAM role for the function

  ### Monitoring and alerting
  - Lambda error notification to SNS
  - Success notification to SNS
  - Cloudwatch dashboard showing IP space changes over time

  # Setting up your project
  Due to the SNS subscription being created in the us-east-1 region (as that's where the topic is) the calling code needs some extra config.

  ## AWS Provider
  Setup an alias AWS provider like the following which will be passwed into the calling module:

  ```hcl
    provider "aws" {
    alias  = "us-east-1"
    region = "us-east-1"
 
    assume_role {
      role_arn          = var.terraform_role_arn
      session_name      = "terraform"
    }    
  }
  ```
  ## Security Groups
  In order for the Lambda function to find the correct security groups to dynamically update you must create two security groups with some specific tags as shown below:-

  ```hcl
    resource "aws_security_group" "alb_global" {
      name        = "sg_alb_cloudfront_global"
      description = "ALB security rules for global CloudFront IP addresses"
      vpc_id      = module.vpc.vpc_id

      egress {
        from_port       = 0
        to_port         = 0
        protocol        = "-1"
        cidr_blocks     = ["0.0.0.0/0"]
      }  

      tags = {
        Name        = "sg_alb_cloudfront_global"
        Type        = "cloudfront_g"
        AutoUpdate  = "true"
        Protocol    = "https"
      }

      lifecycle { 
        ignore_changes = [ingress] 
      }      
    }

    resource "aws_security_group" "alb_regional" {
      name        = "sg_alb_cloudfront_regional"
      description = "ALB security rules for regional CloudFront IP addresses"
      vpc_id      = module.vpc.vpc_id

      egress {
        from_port       = 0
        to_port         = 0
        protocol        = "-1"
        cidr_blocks     = ["0.0.0.0/0"]
      }  

      tags = {
        Name        = "sg_alb_cloudfront_regional"
        Type        = "cloudfront_r"
        AutoUpdate  = "true"
        Protocol    = "https"
      }

      lifecycle { 
        ignore_changes = [ingress] 
      }      
    }    
  ```
# How to use this project
usage: |-
  ```hcl
  module "cloudfront_lambda_updater" {
    source = git::https://github.com/ifunky/terraform-aws-cloudfront-security-sync.git?ref=master"

    region              = "eu-west-1"
    iam_role_name       = "lambda_sec_group_updater"
    sns_alarm_error_arn = "arn:aws:sns:eu-west-1:123456789012:audit-alerts-dev"
    sns_alarm_info_arn  = "arn:aws:sns:eu-west-1:123456789012:audit-info-dev"

    providers = {
        aws.us-east-1 = aws.us-east-1
    }

    tags = {
      Terraform = "true"
    }
  }
  ```

# Include output from terraform-module-inspect
include:
  - "docs/targets.md"
  - "docs/metadata.md"

# List of useful related projects/links
related:
  - name: "PolyDev"
    description: "PolyDev repo and setup guide"
    url: "https://github.com/ifunky/polydev"

references:
  - name: "AWS CloudFront, WAF and Security Groups"
    description: "Amazon blog post with manual instructions"
    url: "https://aws.amazon.com/blogs/security/how-to-automatically-update-your-security-groups-for-amazon-cloudfront-and-aws-waf-by-using-aws-lambda/" 
  - name: "AWS Code Examples"
    description: "Github code examples"
    url: "https://github.com/aws-samples/aws-cloudfront-samples"
  - name: "AWS IP Ranges"
    description: "AWS offical IP ranges documentation"
    url: "https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html"
  - name: "AWS Metric Filters Syntax"
    description: "AWS offical documentaion for Cloudwatch filters"
    url: "https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html"